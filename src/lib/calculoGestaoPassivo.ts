import { CarteiraBCB352, MomentoNegociacao } from "@/types/gestaoPassivo";

export interface CalculoProvisaoResult {
  percentualProvisao: number;
  valorProvisao: number;
  marcoProvisionamento: string;
  momentoNegociacao: MomentoNegociacao;
  valorPropostaAcordo: number;
  percentualPropostaAcordo: number;
  recomendacaoEstrategica: string;
}

/**
 * Busca o percentual de provis√£o BCB 352 baseado na carteira e meses de atraso
 */
export async function buscarPercentualProvisaoBCB352(
  carteira: CarteiraBCB352,
  mesesAtraso: number
): Promise<number> {
  const { supabase } = await import("@/integrations/supabase/client");
  
  const { data, error } = await supabase
    .from("tabela_provisao_bcb352")
    .select("percentual_provisao")
    .eq("carteira", carteira)
    .lte("meses_atraso_min", mesesAtraso)
    .or(`meses_atraso_max.gte.${mesesAtraso},meses_atraso_max.is.null`)
    .single();

  if (error) {
    console.error("Erro ao buscar percentual de provis√£o:", error);
    return 0;
  }

  return data?.percentual_provisao || 0;
}

/**
 * Calcula todos os valores relacionados √† provis√£o e proposta de acordo
 */
export async function calcularGestaoPassivo(
  carteira: CarteiraBCB352,
  saldoDevedor: number,
  mesesAtraso: number
): Promise<CalculoProvisaoResult> {
  // Buscar percentual de provis√£o na tabela BCB 352
  const percentualProvisao = await buscarPercentualProvisaoBCB352(carteira, mesesAtraso);
  
  // Calcular valor da provis√£o
  const valorProvisao = saldoDevedor * percentualProvisao;
  
  // Determinar marco de provisionamento
  const marcoProvisionamento = determinarMarcoProvisionamento(percentualProvisao);
  
  // Determinar momento de negocia√ß√£o
  const momentoNegociacao = determinarMomentoNegociacao(percentualProvisao);
  
  // Calcular proposta de acordo
  let valorPropostaAcordo: number;
  if (percentualProvisao < 0.90) {
    // Se provis√£o < 90%: saldo - provis√£o
    valorPropostaAcordo = saldoDevedor - valorProvisao;
  } else {
    // Se provis√£o >= 90%: 10% do saldo
    valorPropostaAcordo = saldoDevedor * 0.10;
  }
  
  const percentualPropostaAcordo = (valorPropostaAcordo / saldoDevedor) * 100;
  
  // Gerar recomenda√ß√£o estrat√©gica
  const recomendacaoEstrategica = gerarRecomendacaoEstrategica(
    percentualProvisao,
    momentoNegociacao,
    valorPropostaAcordo,
    saldoDevedor
  );
  
  return {
    percentualProvisao,
    valorProvisao,
    marcoProvisionamento,
    momentoNegociacao,
    valorPropostaAcordo,
    percentualPropostaAcordo,
    recomendacaoEstrategica
  };
}

/**
 * Determina o marco de provisionamento (50%, 60%, 70%, 80%, 90%, 100%)
 */
export function determinarMarcoProvisionamento(percentual: number): string {
  if (percentual >= 1.0) return "100";
  if (percentual >= 0.90) return "90";
  if (percentual >= 0.80) return "80";
  if (percentual >= 0.70) return "70";
  if (percentual >= 0.60) return "60";
  if (percentual >= 0.50) return "50";
  return "";
}

/**
 * Determina o momento ideal de negocia√ß√£o
 */
export function determinarMomentoNegociacao(percentual: number): MomentoNegociacao {
  if (percentual >= 1.0) return "total";
  if (percentual >= 0.90) return "premium";
  if (percentual >= 0.70) return "otimo";
  if (percentual >= 0.50) return "muito_favoravel";
  if (percentual >= 0.30) return "favoravel";
  return "inicial";
}

/**
 * Gera recomenda√ß√£o estrat√©gica baseada nos c√°lculos
 */
function gerarRecomendacaoEstrategica(
  percentualProvisao: number,
  momento: MomentoNegociacao,
  valorProposta: number,
  saldoDevedor: number
): string {
  const percentualDesconto = ((saldoDevedor - valorProposta) / saldoDevedor) * 100;
  
  const recomendacoes: Record<MomentoNegociacao, string> = {
    inicial: `üí° **MOMENTO INICIAL** (Provis√£o: ${(percentualProvisao * 100).toFixed(2)}%)\n\nO banco ainda n√£o provisionou quantias significativas. A margem de negocia√ß√£o √© limitada. Recomenda-se:\n- Negociar desconto de at√© ${percentualDesconto.toFixed(0)}%\n- Focar em renegocia√ß√£o de prazos\n- Apresentar garantias adicionais se poss√≠vel\n- Evitar lit√≠gio neste momento`,
    
    favoravel: `‚ö†Ô∏è **MOMENTO FAVOR√ÅVEL** (Provis√£o: ${(percentualProvisao * 100).toFixed(2)}%)\n\nO banco come√ßou a provisionar valores relevantes. H√° espa√ßo para negocia√ß√£o. Estrat√©gia recomendada:\n- Propor desconto de ${percentualDesconto.toFixed(0)}%\n- Negociar redu√ß√£o de juros e encargos\n- Apresentar plano de pagamento estruturado\n- Considerar acordo extrajudicial`,
    
    muito_favoravel: `‚úÖ **MOMENTO MUITO FAVOR√ÅVEL** (Provis√£o: ${(percentualProvisao * 100).toFixed(2)}%)\n\nO banco provisionou entre 50-70% do saldo. Momento ideal para negocia√ß√£o agressiva:\n- Propor desconto de ${percentualDesconto.toFixed(0)}%\n- Solicitar isen√ß√£o de juros e multas\n- Negociar entrada + parcelas reduzidas\n- Banco est√° motivado a recuperar algo antes da perda total`,
    
    otimo: `üéØ **MOMENTO √ìTIMO** (Provis√£o: ${(percentualProvisao * 100).toFixed(2)}%)\n\nO banco provisionou 70-90% do valor. Alta probabilidade de acordo vantajoso:\n- Propor desconto de ${percentualDesconto.toFixed(0)}%\n- Banco prefere recuperar 10-30% a perder 100%\n- Negociar pagamento √† vista com desconto m√°ximo\n- Considerar quita√ß√£o em at√© 3 parcelas`,
    
    premium: `üíé **MOMENTO PREMIUM** (Provis√£o: ${(percentualProvisao * 100).toFixed(2)}%)\n\nO banco provisionou 90-100%. Situa√ß√£o extremamente favor√°vel:\n- Propor quita√ß√£o por ${percentualDesconto.toFixed(0)}% de desconto\n- Banco aceitar√° at√© 90% de desconto para evitar preju√≠zo cont√°bil\n- Negociar pagamento √† vista ou em at√© 2 parcelas\n- Momento ideal para acordo definitivo`,
    
    total: `üî• **PROVIS√ÉO TOTAL** (Provis√£o: ${(percentualProvisao * 100).toFixed(2)}%)\n\nO banco provisionou 100% do valor. D√≠vida considerada irrecuper√°vel:\n- Propor quita√ß√£o simb√≥lica (5-10% do saldo)\n- Banco pode aceitar qualquer valor para limpar balan√ßo\n- Negociar pagamento √† vista com desconto m√°ximo\n- Excelente oportunidade para acordo hist√≥rico`
  };
  
  return recomendacoes[momento];
}

/**
 * Calcula dias de atraso entre duas datas
 */
export function calcularDiasAtraso(dataInadimplencia: Date): number {
  const hoje = new Date();
  const diffTime = Math.abs(hoje.getTime() - dataInadimplencia.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays;
}

/**
 * Calcula meses de atraso baseado em dias
 */
export function calcularMesesAtraso(diasAtraso: number): number {
  return Math.floor(diasAtraso / 30);
}

/**
 * Verifica se o contrato est√° em default (> 90 dias)
 */
export function verificarDefault(diasAtraso: number): boolean {
  return diasAtraso > 90;
}
